[cmdletbinding()]
param (
 [Parameter(Mandatory = $True)]
 [Alias('DCs')]
 [string[]]$DomainControllers,
 [Parameter(Mandatory = $True)]
 [System.Management.Automation.PSCredential]$ADCredential,
 [Parameter(Mandatory = $True)]
 [string]$SearchBase,
 [string]$Group,
 [int]$MonthsSinceLastLogon,
 [Alias('wi')]
 [SWITCH]$WhatIf
)

function Clear-Group ($group) {
 begin {
  $groupSams = (Get-ADGroupMember -Identity $group).SamAccountName
  $msg = $MyInvocation.MyCommand.Name, $group, $groupSams.count
  Write-Host ('{0},{1},{2}' -f $msg) -Fore Green
 }
 process {
  Write-Host ('{0},{1}' -f $MyInvocation.MyCommand.Name, $group)
  Remove-ADGroupMember $group $GroupSams -Confirm:$false -WhatIf:$WhatIf
 }
}

function Update-GroupMembers ($group) {
 begin {
  $aDParams = @{
   Filter     = {
    ( mail -like "*@*" ) -and
    ( employeeID -like "*" ) -and
    ( enabled -eq $True )
   }
   Properties = 'employeeId', 'lastLogonDate', 'Description', 'AccountExpirationDate'
   Searchbase = $SearchBase
  }
  $cutOffdate = (Get-Date).AddMonths(-$MonthsSinceLastLogon)
  # Paid staff members emplid are generated by Escape and are currently in the 4-6 digit range.
  # The regex "^\d{4,6}$" accounts for this limit.
  $currentStaff = Get-Aduser @aDParams | Where-Object {
  (($_.employeeId -match "^\d{4,6}$") -and ($_.lastLogonDate -gt $cutOffdate)) -or
  ($_.Description -like "*Board*Member*")
  }
  $msg = $MyInvocation.MyCommand.Name, $group, $currentStaff.count
  Write-Host ('{0},{1},Count: {2}' -f $msg) -Fore Green
 }
 process {
  # Write-Host ('{0}' -f $MyInvocation.MyCommand.Name)
  $addMembers = @{
   Identity = $group
   Members  = $currentStaff.samAccountName
   Confirm  = $false
   WhatIf   = $WhatIf
  }
  Add-ADGroupMember @addMembers
 }
}

# ========================== Main ===========================
# Imported Functions
. .\lib\Clear-SessionData.ps1
. .\lib\New-ADSession.ps1
. .\lib\Select-DomainController.ps1
. .\lib\Show-TestRun.ps1

Show-TestRun
Clear-SessionData

$dc = Select-DomainController $DomainControllers
$adCmdLets = 'Get-ADUser', 'Get-ADGroup', 'Get-ADGroupMember', 'Add-ADGroupMember', 'Remove-ADGroupMember'
New-ADSession -dc $dc -cmdlets $adCmdLets -cred $ADCredential

Clear-Group $Group
Update-GroupMembers $Group

Clear-SessionData
Show-TestRun